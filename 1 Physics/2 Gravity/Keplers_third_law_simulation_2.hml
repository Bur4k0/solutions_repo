<!DOCTYPE html>
<html>
<head>
    <title>Kepler's Third Law Simulation</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #0d0d0d;
            margin: 0;
            overflow: hidden;
            font-family: Arial, sans-serif;
        }
        canvas {
            border: 2px solid #333;
            background-color: black;
        }
        #info {
            position: absolute;
            top: 10px;
            left: 10px;
            background-color: rgba(0, 0, 0, 0.6);
            padding: 10px;
            border-radius: 8px;
            color: white;
        }
    </style>
</head>
<body>
    <div id="info">
        <h3>Kepler's Third Law Simulation</h3>
        <p>Planets orbiting a central star. Observe their motion and trails.</p>
    </div>
    <canvas id="simulationCanvas" width="1000" height="1000"></canvas>

    <script>
        const canvas = document.getElementById('simulationCanvas');
        const ctx = canvas.getContext('2d');

        const G = 0.05;
        const sun = { x: 500, y: 500, mass: 1500, radius: 30 };
        const planets = [
            { x: 300, y: 500, vx: 0, vy: 2.2, mass: 1, radius: 6, color: '#4A90E2', trail: [] },
            { x: 500, y: 700, vx: -1.8, vy: 0, mass: 1, radius: 6, color: '#50E3C2', trail: [] },
            { x: 700, y: 500, vx: 0, vy: -1.5, mass: 1, radius: 6, color: '#E35050', trail: [] },
            { x: 500, y: 300, vx: 1.5, vy: 0, mass: 1, radius: 6, color: '#F5A623', trail: [] }
        ];

        function drawSun() {
            ctx.beginPath();
            ctx.arc(sun.x, sun.y, sun.radius, 0, Math.PI * 2);
            ctx.fillStyle = 'yellow';
            ctx.shadowBlur = 20;
            ctx.shadowColor = 'yellow';
            ctx.fill();
            ctx.closePath();
            ctx.shadowBlur = 0;
        }

        function drawPlanet(planet) {
            ctx.beginPath();
            ctx.arc(planet.x, planet.y, planet.radius, 0, Math.PI * 2);
            ctx.fillStyle = planet.color;
            ctx.fill();
            ctx.closePath();
        }

        function drawTrail(planet) {
            ctx.beginPath();
            ctx.strokeStyle = planet.color;
            ctx.lineWidth = 1;
            ctx.globalAlpha = 0.6;
            for (let i = 0; i < planet.trail.length - 1; i++) {
                ctx.moveTo(planet.trail[i].x, planet.trail[i].y);
                ctx.lineTo(planet.trail[i + 1].x, planet.trail[i + 1].y);
            }
            ctx.stroke();
            ctx.globalAlpha = 1.0;
        }

        function updatePlanet(planet) {
            const dx = sun.x - planet.x;
            const dy = sun.y - planet.y;
            const distance = Math.sqrt(dx * dx + dy * dy);

            const force = (G * sun.mass * planet.mass) / (distance * distance);
            const ax = force * (dx / distance);
            const ay = force * (dy / distance);

            planet.vx += ax;
            planet.vy += ay;

            planet.x += planet.vx;
            planet.y += planet.vy;

            planet.trail.push({ x: planet.x, y: planet.y });
            if (planet.trail.length > 150) planet.trail.shift();
        }

        function animate() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawSun();

            planets.forEach(planet => {
                updatePlanet(planet);
                drawTrail(planet);
                drawPlanet(planet);
            });

            requestAnimationFrame(animate);
        }

        animate();
    </script>
</body>
</html>
